# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# sashena
thesis_env/
data1/
data_old/
self-training/outputs/
deep-spectral-segmentation/outputs/
deep-spectral-segmentation/results/
.vscode/
dino/
notebooks/
self-training/wandb/
**/__pycache__/
dino/__pycache__/
self-training/.polyaxon/
self-training/tasks/configs/wandb/server.yaml
self-training/multirun/
ImageNet-Datasets-Downloader/
UltrasondConfienceMap/
myenv/
.pai_simulator/
self-training/Dockerfile
.gitignore
test.yaml
settings.yaml
package-lock.json
GEANT-OV-RSA-CA-4.crt
USERTrust-RSA-Certification-Authority.crt
Ubuntu.appx
self-training/tasks/configs/wandb/defaults.yaml
slurm_scripts/*.out
slurm_scripts/*.err
slurm_scripts/logs
evaluation/__pycache__/
evaluation/outputs/
configs/
evaluation/demo_*
cutler_env/
evaluation/eval_analysis/artifacts
slurm_scripts/single_eval.sh
slurm_scripts/pipelinewitheval.sh
slurm_scripts/deep_spectral_pipeline.sh
slurm_scripts/cutler_inference.sh
slurm_scripts/*.out
slurm_scripts/*.err
slurm_scripts/*/*.out
slurm_scripts/*/*.err
slurm_scripts/
final_runs
data_preprocessing/denoise/MPRNet/*.err
data_preprocessing/denoise/MPRNet/*.out
data_preprocessing/denoise/*.err
data_preprocessing/denoise/*.out
data_preprocessing/denoise/MPRNet
data_preprocessing/denoise/MPRNet/Denoising/pretrained_models/model_denoising.pth
data_preprocessing/denoise/MPRNet/Deraining/pretrained_models/model_deraining.pth
spectral-clustering/*.png
spectral-clustering/ann_index.ann
self-training/tasks/configs/wandb/defaults.yaml
slurm/
sota/*.err
sota/*.out
deep-spectral-segmentation/dino2_models/dinov2_with_attention_extraction/
data/THYROID_test9